#summary The easily digestable benefits of using awe6.

= Why is awe6 Useful? =

Here are some at-a-glance benefits towards developing games using frameworks, and the benefits to making awe6 your framework of choice:

== Why are Game Frameworks Useful? ==

  * Common, consistent language.  Multiple people across multiple projects across multiple disciplines using the same words.
  * Benefit from the expertise of others.  By using a stable, proven codebase many pitfalls can be totally avoided and complex concepts adopted (even without understanding).
  * Avoid reinventing the wheel.  Adoption of abstracts allows a developer to concentrate on the concrete, and "get the job done" quicker.
  * Focus on the fun.  Many games developers would rather concentrate their efforts on the fluff than the crunch.
  * Code reuse.  By using a framework [http://en.wikipedia.org/wiki/Separation_of_concerns separation of concerns] is encouraged, allowing code to be modular and reusable.
  * Frameworks = easier = faster = maintainable = teachable = better value.
  
== Ok Sold, But Why awe6? ==

  * Designed to relieve pain.  This framework was designed and coded by a senior games developer with tens of thousands of hours of professional games team development experience for one purpose - to build great games easily.
  * Infinately adaptable architecture - this framework was designed for [GameGenres any game type].
  * Inversion of Control.  By addressing game design in a top down approach focus is on flow, relationships and reuse (rather than spaghetti).
  * Talk in plain language.  A game is described as a collection of scenes which allow entities to interact with one another and their respective agendas.
  * More design patterns than we'd care to list.  They're pretty much all in here, doing the job they need to do without interfering with others.  
  * Ready-to-run boilerplate.  Fully Agile methodology friendly out of the tin ... every project starts from a working, compilable game ... iterate until "complete".
  * Follows strict and mature [CodingConventions conventions] leading to development benefits such as [http://en.wikipedia.org/wiki/Solid_(object-oriented_design) Solid].
  * Future proof.  Platform agnostic declarative interfaces means this framework is concerned with what (constant), not how (flux).
  * Leverages the great work of others.  Encourages the inclusion of the "best tool for the job" (e.g. physics, rendering etc) via third party libraries rather than provide one-stop-shop lesser alternatives.
  * This framework is just the beginning.  Designed to drive IDEs, commercial component channels, dynamically loaded libraries and multi platform targets, the awe6 story is just beginning.
  
Want to know more?  Further understanding of awe6's philosophy can be obtained from the [ReadingList reading list].