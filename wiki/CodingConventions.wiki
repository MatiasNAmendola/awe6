#summary Guidelines on coding styles used within awe6.

= Usability through consistency =

Conventions are important for a consistent experience.  They are intended to improve the readability of the source code and make maintenance and extension easier.

No convention should be considered definitive - many of these choices may not be appropriate outside of the scope of this library.

  * Clear, intuitive, obvious naming.
  * Americanised spelling.
  * Interfaces prefixed by `I`.
  * Abstract classes prefixed by `A`.
  * Enumerators prefixed by `E`.
  * Interfaces housed in the `awe6.interfaces` package.
  * Basic implementation classes housed in the `awe6.core` package.
  * Private scope members prefixed with `_`.
  * Local scope members prefixed with `l_`.
  * Reserved members prefixed with `__`.
  * Enumerated constructors represented as `CONST_CASE`.
  * Some enumerators extensible via `SUB_TYPE( value:Dynamic )`.
  * Helper classes kept private and prefixed with `_Helper`.
  * Direct-context type enumerators publicly scoped and named `type`.
  * Non-direct-context type enumerators named `%context%Type`.
  * Strict typing throughout.
  * All scope clearly defined (e.g. `private`).
  * No uppercase acronyns in `camelCase` or `PascalCase`.
  * New lines for all braces `{}`.
  * Spaces inside paranthesis: `( example )`.
  * Implicit Getter and Setter methods prefixed with `__get_` & `__set_`.
  * Bool property names prefixed with `is`, `as`, or `has`.
  * Use of constructor dependency injection.
  * Casting avoided.
  * Statics eliminated (therefore no Singletons!).
  * All Interfaces inline documented for use with [http://code.google.com/p/caffeine-hx/wiki/ChxDoc ChxDoc].